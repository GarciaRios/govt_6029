scale_x_log10()  +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(aes(color = continent, alpha = .2)) +
geom_smooth(color = "black") +
scale_x_log10()  +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = .2) +
geom_smooth() +
scale_x_log10()  +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = year, y = lifeExp)) +
geom_point(aes(color = continent, alpha = .2)) +
geom_smooth(color = "black") +
scale_x_log10()  +
facet_wrap(~ continent)
ggplot(gapminder, aes(x = year, y = lifeExp)) +
geom_jitter(aes(color = continent, alpha = .2)) +
geom_smooth(color = "black") +
scale_x_log10()  +
facet_wrap(~ continent)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
ggplot(filter(gapminder, country %in% some_countries),
aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point()
some_countries <- c("United States", "Canada", "Rwanda", "Cambodia", "Mexico")
ggplot(filter(gapminder, country %in% some_countries),
aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point()
ggplot(filter(gapminder, country %in% some_countries),
aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point(aes(size=gdpPercap))
ggplot(subset(gapminder, country %in% some_countries),
aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point(aes(size=gdpPercap)) +
theme_minimal()
ggplot(subset(gapminder, country %in% some_countries),
aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point(aes(size=gdpPercap)) +
theme_minimal() +
scale_color_brewer(palette = "Dark2")
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
setwd("G:/My Drive/Work/Teaching/Courses/Advanced Regression Analysis/govt_6029/Labs/lab2")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
getwd()
getwd()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, eval = F)
library(dplyr)
library(ggplot2)
library(gapminder)
# Chunk 3
data("gapminder")
head(gapminder)
# Chunk 4
glimpse(gapminder)
# Chunk 5
filter(gapminder, lifeExp < 29)
filter(gapminder, country == "Rwanda")
# Chunk 6
gapminder2 <-
filter(gapminder, continent == "Africa", year < 1966, lifeExp < 40)
# Chunk 7
filter(gapminder, continent == "Africa" & year < 1966 & lifeExp < 40 )
# Chunk 8
filter(gapminder, country == "Afghanistan" | country == "Albania")
# Chunk 9
arrange(gapminder, pop)
arrange(gapminder, -pop)
# Chunk 10
select(gapminder, year, lifeExp)
# Chunk 11
df1 <- filter(gapminder,country == "Cambodia")
df2 <- select(df1, year, lifeExp)
df3 <- slice(df2, 1:2)
# Chunk 12
gapminder %>%
filter(country == "Cambodia") %>%
select(year, lifeExp) %>%
slice(1:2)
# Chunk 13
gapminder <-
gapminder %>%
mutate(gdp = pop * gdpPercap)
gapminder
# Chunk 14
just_usa <- gapminder %>%
filter(country == "United States") %>%
select(year, gdpPercap) %>%
rename(usa_gdpPercap = gdpPercap)
# Chunk 15
gapminder <-
left_join(gapminder, just_usa, by = c("year"))
# Chunk 16
gapminder <-
gapminder %>%
mutate(gdpPercapRel = gdpPercap / usa_gdpPercap)
# Chunk 17
gapminder %>%
select(gdpPercapRel) %>%
summary()
# Chunk 18
gapminder %>%
filter(country == "Canada") %>%
select(country, year, gdpPercap, usa_gdpPercap, gdpPercapRel)
gapminder %>%
filter(country == "Mexico") %>%
select(country, year, gdpPercap, usa_gdpPercap, gdpPercapRel)
# Chunk 19
df_NAFTA<-
gapminder %>%
filter(country %in% c("Mexico", "Canada")) %>%
select(country, year, gdpPercap, usa_gdpPercap, gdpPercapRel)
# Chunk 20
just_usa_life <- gapminder %>%
filter(country == "United States") %>%
select(year, lifeExp) %>%
rename(usa_lifeExp = lifeExp)
gapminder <-
left_join(gapminder, just_usa_life, by = ("year"))
gapminder <-
gapminder %>%
mutate(lifeExpRel = lifeExp / usa_lifeExp)
gapminder %>%
select(lifeExpRel) %>%
summary()
# Chunk 21
glimpse(gapminder)
# Chunk 23
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
# Chunk 24
ggplot(gapminder, aes(x = log10(gdpPercap), y = lifeExp)) +
geom_point()
# Chunk 25
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
scale_x_log10()
# Chunk 26
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point() +
scale_x_log10()
# Chunk 27
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = .3, size = 3) +
scale_x_log10()
# Chunk 28
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .3, size = 3) +
geom_smooth() +
scale_x_log10()
# Chunk 29
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
geom_smooth(lwd = 2, se = FALSE) +
scale_x_log10()
# Chunk 30
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
geom_smooth(lwd = 2, se = FALSE,  method = "lm") +
scale_x_log10()
# Chunk 31
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point() +
geom_smooth(lwd = 2, se = FALSE,  method = "lm") +
scale_x_log10()
# Chunk 32
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
# Chunk 33
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = .2) +
geom_smooth() +
scale_x_log10()  +
facet_wrap(~ continent)
# Chunk 34
ggplot(gapminder, aes(x = year, y = lifeExp)) +
geom_jitter(aes(color = continent, alpha = .2)) +
geom_smooth(color = "black") +
scale_x_log10()  +
facet_wrap(~ continent)
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
getwd()
??`gganimate-package`
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
p<-
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
p
animate(p)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~ continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
theme_bw()
load(url("https://github.com/GarciaRios/govt_3990/raw/gh-pages/Labs/lab3/resources/hot_hand.RData"))
load(url("https://github.com/GarciaRios/govt_3990/raw/gh-pages/Labs/lab3/resources/hot_hand.RData"))
View(calc_streak)
library(dplyr)
library(ggplot2)
load(url("https://github.com/GarciaRios/govt_3990/raw/gh-pages/Labs/lab3/resources/hot_hand.RData"))
View(kobe_basket)
View(calc_streak)
kobe_streak <- calc_streak(kobe_basket$shot)
View(kobe_streak)
game1_data <- kobe_basket %>% filter(game == 1)
game1_data
View(game1_data)
kobe_streak_game1 <- calc_streak(game1_data$shot)
kobe_streak_game1
ggplot(kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
ggplot(kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1) +
theme_bw()
ggplot(kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1) +
theme_minimal()
summary(kobe_basket)
kobe_basket %>%
count(shot)
kobe_basket %>%
count(shot) %>%
mutate(Pct  = prop.table(n))
kobe_basket %>%
count(shot) %>%
mutate("Pct %"   = prop.table(n))
h_m <- kobe_basket %>%
count(shot) %>%
mutate("Pct %"   = prop.table(n))
View(h_m)
h_m <- kobe_basket %>%
count(shot) %>%
mutate(Pct   = prop.table(n))
ggplot(h_m, aes(x  = shot, y = Pct))
ggplot(h_m, aes(x  = shot, y = Pct)) +
geom_col()
coin_outcomes <- c("heads", "tails")
coin_outcomes
sample(coin_outcomes, size = 1, replace = TRUE)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
coin_outcomes <- c("Sergio", "Jesus")
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 3, replace = TRUE)
sample(coin_outcomes, size = 3, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_fair_coin %>%
count()
sim_fair_coin
table(sim_fair_coin)
sim_fair_coin <- sample(coin_outcomes,
size = 1000,
replace = TRUE)
table(sim_fair_coin)
sim_fair_coin <- sample(coin_outcomes,
size = 100,
replace = TRUE)
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes,
size = 100,
replace = TRUE,
prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
set.seed(9102015)                 # make sure to change the seed
sim_unfair_coin <- sample(coin_outcomes,
size = 100,
replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
?sample
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
sim_basket
shot_outcomes
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE)
table(sim_basket)
sim_basket
prop.table(table(sim_basket) )
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(.45, 55))
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(.45, .55))
prop.table(table(sim_basket) )
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(55, .45))
sim_basket <- sample(shot_outcomes,
size = 133,
replace = TRUE,
prob = c(.55, .45))
prop.table(table(sim_basket) )
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(.45, .55))
prop.table(table(sim_basket) )
prop.table(table(sim_basket) )
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(.45, .55))
prop.table(table(sim_basket) )
library(tidyverse)
library(magrittr)
library(haven)
df <- read_csv("../data/gdp.csv")
df
ggplot(df, aes(x = factor(party), y = grgdpch,
color = factor(party) )) +
geom_boxplot(size = .9) +
geom_jitter(width = .05, alpha = .6, size = 2) +
scale_color_brewer(palette = "Set1", direction = -1) +
scale_x_discrete(labels = c("Democratic \n Presidents",
"Republican \n Presidents")) +
theme_bw() +
labs(title = "Economic Performance by Presidential Party",
y = "Annual GDP Growth %",
x = "") +
theme(legend.position = "none")
df %>% group_by(party) %>%
summarize(mean_gdp = mean(grgdpch, na.rm = T))
df %$% t.test(grgdpch[party== 1])
3.094356   -      1.725821
#same as
df %$%
t.test(x = grgdpch[party== -1],           #  First group
y = grgdpch[party== 1],           #  Second group
mu = 0,                #  Null hypothesis
conf.level = 0.95     #  Desired confidence level
)
summary(m1 <- lm(grgdpch ~ party, data = gdp))
summary(m1 <- lm(grgdpch ~ party, data = gdp))
df %$% t.test(grgdpch ~ party)
#same as
df %$%
t.test(x = grgdpch[party== -1],           #  First group
y = grgdpch[party== 1],           #  Second group
mu = 0,                #  Null hypothesis
conf.level = 0.95     #  Desired confidence level
)
summary(m1 <- lm(grgdpch ~ party, data = gdp))
summary(m1 <- lm(grgdpch ~ party, data = df))
predict(m1, interval = "confidence")
3.094356   -      1.725821
df <- read_csv("../data/gdp.csv")
ggplot(df, aes(x = factor(party), y = grgdpch,
color = factor(party) )) +
geom_boxplot(size = .9) +
geom_jitter(width = .05, alpha = .6, size = 2) +
scale_color_brewer(palette = "Set1", direction = -1) +
scale_x_discrete(labels = c("Democratic \n Presidents",
"Republican \n Presidents")) +
theme_bw() +
labs(title = "Economic Performance by Presidential Party",
y = "Annual GDP Growth %",
x = "") +
theme(legend.position = "none")
df %>% group_by(party) %>%
summarize(mean_gdp = mean(grgdpch, na.rm = T))
df %>% group_by(party) %>%
summarize(mean_gdp = median(grgdpch, na.rm = T))
df %$% t.test(grgdpch[party== 1])
df %$% t.test(grgdpch[party== -1])
#same as
df %$%
t.test(x = grgdpch[party== -1],           #  First group
y = grgdpch[party== 1],           #  Second group
mu = 0,                #  Null hypothesis
conf.level = 0.95     #  Desired confidence level
)
3.094356   -      1.725821
#same as
df %$%
t.test(x = grgdpch[party== -1],           #  First group
y = grgdpch[party== 1],           #  Second group
mu = 0,                #  Null hypothesis
conf.level = 0.95     #  Desired confidence level
)
summary(m1 <- lm(grgdpch ~ party, data = df))
predict(m1, interval = "confidence")
summary(m1 <- lm(grgdpch ~ factor(party), data = df))
3.094356   -      1.725821
